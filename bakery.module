<?php

/**
 * Implementation of hook_menu().
 */
function bakery_menu() {
  $items = array();
  
  $items['admin/settings/bakery'] = array(
    'title' => 'Bakery',
    'access arguments' => array('administer bakery'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bakery_settings'),
    'description' => 'Infrastructure-wide single-sign-on system options.',
  );

  if (!variable_get('bakery_is_master', 0)) {
    $items['bakery'] = array(
      'title' => 'Login',
      'access callback' => 'user_is_anonymous',
      'page callback' => 'bakery_bake_oatmeal_cookie',
      'options' => array('alter' => TRUE),
    );
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function bakery_perm() {
  return array('administer bakery');
}

function bakery_translated_menu_link_alter(&$item) {
  if ($item['href'] == 'bakery') {
    $item['localized_options']['query'] = drupal_get_destination();
  }
}

function bakery_bake_oatmeal_cookie() {

  $key = variable_get('bakery_key', '');
  if (!empty($key)) {
    global $base_root;
    $cookie = array();
    $cookie['name'] = 'login';
    $destination = drupal_get_destination();
    $cookie['destination'] = $base_root .'/'. substr($destination, strpos($destination, '=') + 1);
    $cookie['calories'] = 320;
    $cookie['timestamp'] = $_SERVER['REQUEST_TIME'];
    $cookie['signature'] = hash_hmac('sha256', $cookie['name'] . '/' . $cookie['timestamp'], $key);
    setcookie('OATMEAL', serialize($cookie), $_SERVER['REQUEST_TIME'] + variable_get('bakery_freshness', '3600'), '/', variable_get('bakery_domain', ''));
  }

  unset($_REQUEST['destination']);
  drupal_goto(trim(variable_get('bakery_master', 'http://drupal.org/'), '/') .'/user/login');
}

function bakery_settings() {
  $form = array();

  $form['bakery_is_master'] = array(
    '#type' => 'checkbox',
    '#title' => 'Is this the master site?',
    '#default_value' => variable_get('bakery_is_master', 0),
    '#description' => t('On the master site, accounts need to be created by traditional processes, i.e by a user registering or an admin creating them.'),
  );

  $form['bakery_master'] = array(
    '#type' => 'textfield',
    '#title' => 'Master site',
    '#default_value' => variable_get('bakery_master', 'http://drupal.org/'),
    '#description' => t('Specify the master site for your bakery network.'),
  );

  $form['bakery_allow_local'] = array(
    '#type' => 'checkbox',
    '#title' => 'Allow local sign-ons and account management',
    '#default_value' => variable_get('bakery_allow_local', 1),
  );

  $form['bakery_freshness'] = array(
    '#type' => 'textfield',
    '#title' => 'Seconds of age before a cookie is old',
    '#default_value' => variable_get('bakery_freshness', '3600'),
  );

  $form['bakery_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Private key for cookie validation',
    '#default_value' => variable_get('bakery_key', ''),
  );

  $form['bakery_domain'] = array(
    '#type' => 'textfield',
    '#title' => 'Cookie domain',
    '#default_value' => variable_get('bakery_domain', ''),
  );
  
  return system_settings_form($form);
}


/**
 * Implementation of hook_menu_alter().
 */
function bakery_menu_alter(&$callbacks) {
  if (!variable_get('bakery_is_master', 0)) {
    unset($callbacks['user/login'], $callbacks['user/password'], $callbacks['user/reset/%/%/%'], $callbacks['user/register']);
  }
}

/**
 * Function to validate cookies
 */
function _bakery_validate_cookie($type = 'CHOCOLATECHIP') {
  $key = variable_get('bakery_key', '');

  watchdog('bakery', 'Cookies:<pre>' . print_r($_COOKIE, TRUE) . '</pre>');

  if (!isset($_COOKIE[$type]) || !$key || !variable_get('bakery_domain', '')) {
    return;
  }
  
  $cookie = unserialize($_COOKIE[$type]);
  $signature = hash_hmac('sha256', $cookie['name'] . '/' . $cookie['timestamp'], $key);

  $valid = FALSE;

  if ($signature == $cookie['signature'] && $cookie['timestamp'] + variable_get('bakery_freshness', '3600') >= $_SERVER['REQUEST_TIME']) {
    $valid = TRUE;
  }

  return $valid;
}

/**
 * 
 */
function _bakery_taste_chocolatechip_cookie() {
  $valid = _bakery_validate_cookie();
  if ($valid) {
    global $user;

    $cookie = unserialize($_COOKIE['CHOCOLATECHIP']);
    watchdog('bakery', 'This is a valid cookie.');
  
    // Bake a fresh cookie. Yum.
    _bakery_bake_chocolatechip_cookie($cookie['name'], $cookie['mail'], $cookie['init']);

    if ($user->name != $cookie['name']) {
      $account = user_load(array('name' => $cookie['name']));
      
      // Create the account if it doesn't exist.
      if (!$account && !variable_get('bakery_is_master', 0)) {
        $checks = TRUE;
        if (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE uid != %d AND LOWER(mail) = LOWER('%s')", $user->uid, $cookie['mail'])) > 0) {
          drupal_set_message(t('The e-mail address %email is already registered. <a href="@contact">Please contact the site administrator.</a>', array('%email' => $cookie['mail'], '@contact' => variable_get('bakery_master', 'http://drupal.org/') .'contact')), 'error');
          $checks = FALSE;
        }
        if (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE uid != %d AND LOWER(name) = LOWER('%s')", $user->uid, $cookie['name'])) > 0) {
          drupal_set_message(t('The name %name is already registered. <a href="@contact">Please contact the site administrator.</a>', array('%name' => $cookie['name'], '@contact' => variable_get('bakery_master', 'http://drupal.org/') .'contact')), 'error');
          $checks = FALSE;
        }

        if ($checks) {
          $new = array(
            'name' => $cookie['name'],
            'mail' => $cookie['mail'],
            'init' => $cookie['init'],
            );
          $account = user_save(new stdClass(), $new);
          $account = user_load($account->uid);
        }
      }

      if ($account) {
        user_external_login($account);
      }
    }

    return TRUE;
  }
  
  if (!$valid) {
    watchdog('bakery', 'Eating the bad cookie.');
  
    // Eat the bad cookie. Burp.
    _bakery_eat_cookie();
    
    if ($user->uid > 0) {
      watchdog('bakery', 'Logging out the user with the bad cookie.');
      require_once drupal_get_path('module', 'user') . '/user.pages.inc';
      user_logout();
    }
  }
  
  return FALSE;
}

/**
 * 
 */
function _bakery_taste_oatmeal_cookie() {
  $valid = _bakery_validate_cookie('OATMEAL');

  if ($valid) {
    $cookie = unserialize($_COOKIE['OATMEAL']);
    _bakery_eat_cookie('OATMEAL');
    drupal_goto($cookie['destination']);
  }
}

function _bakery_bake_chocolatechip_cookie($name, $mail, $init) {
  $key = variable_get('bakery_key', '');
  if (!empty($key)) {
    $cookie = array();
    $cookie['name'] = $name;
    $cookie['mail'] = $mail;
    $cookie['init'] = $init;
    $cookie['calories'] = 480;
    $cookie['timestamp'] = $_SERVER['REQUEST_TIME'];
    $cookie['signature'] = hash_hmac('sha256', $cookie['name'] . '/' . $cookie['timestamp'], $key);
    setcookie('CHOCOLATECHIP', serialize($cookie), $_SERVER['REQUEST_TIME'] + variable_get('bakery_freshness', '3600'), '/', variable_get('bakery_domain', ''));
    watchdog('bakery', 'Set single-sign-on cookie.');
  }
}

function _bakery_eat_cookie($type = 'CHOCOLATECHIP') {
  setcookie($type, '', $_SERVER['REQUEST_TIME'] - 3600);
  setcookie($type, '', $_SERVER['REQUEST_TIME'] - 3600, '/', variable_get('bakery_domain', ''));  
}

/**
 * Implementation of hook_user().
 */
function bakery_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'login') {
    _bakery_bake_chocolatechip_cookie($account->name, $account->mail, url("user/$account->uid/edit", array('absolute' => TRUE)));
    if (variable_get('bakery_is_master', 0)) {
      _bakery_taste_oatmeal_cookie();
    }
  }
  else if ($op == 'logout') {
    _bakery_eat_cookie();
  }
}

/**
 * Implementation of hook_init().
 */
function bakery_init() {
  _bakery_taste_chocolatechip_cookie();
}

// Hide username and password options. 
function bakery_form_alter(&$form, $form_state, $form_id) {
  if (!variable_get('bakery_allow_local', 1) && !user_access('administer bakery')) {
    $form['account']['name']['#access'] = FALSE;
    $form['account']['pass']['#access'] = FALSE;
  }
}
